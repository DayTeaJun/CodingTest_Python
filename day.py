"""
DAY 1
1. 시간 복잡도
: 문제를 해결하기 위한 연산 횟수
ex) 파이썬의 경우 2,000만 번~ 1억 번의 연산을 1초의 수행 시간으로 예측할 수 있음

2. 시간 복잡도 유형
 1) 빅-오메가 Ω(n) : 최선일 경우 연산 횟수 표기법
 2) 빅-세타 θ(n) : 보통일 때 연산 횟수 표기법
 3) 빅-오 O(n) : 최악일 때 연산 횟수 표기법
 """

import random
findNumber = random.randrange(1, 101) # 1 ~ 100 사이 랜덤값 생성

for i in range(1, 101):
    if i == findNumber:
        print(i)
        break
"""
위 코드의 시간 복잡도
빅-오메가 -> 값을 운좋게 한번에 찾을 경우 (1번)
빅-세타 -> 평균적으로 값을 찾을 경우 (N/2번)
빅-오 -> 값을 마지막에 찾을 경우 (N번)
"""

"""
코딩테스트에서는 빅-오(최악) 표기법을 기준으로 계산을 하는 것이 좋다.
(다양한 테스트 케이스를 통과해야하기 때문)
"""